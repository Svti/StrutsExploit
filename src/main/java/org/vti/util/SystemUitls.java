package org.vti.util;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.net.ssl.HttpsURLConnection;

public class SystemUitls {

	public static Image getImage(String path) {
		BufferedImage image = null;
		try {
			image = ImageIO.read(Runtime.getRuntime().getClass().getResource("/" + path));
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
		return image;
	}

	public static String getText() {
		try {
			InputStream inputStream = Runtime.getRuntime().getClass().getResourceAsStream("/resource/small.txt");
			BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
			String temp = "";
			while (reader.ready()) {
				temp += reader.readLine() + "\n";
			}
			return temp;
		} catch (Exception e) {
			return "";
		}
	}

	public static InputStream stream(String url, String body, Map<String, String> headers) throws IOException {
		// connection
		URL u = new URL(url);
		HttpURLConnection conn = null;
		if (url.startsWith("https://")) {
			conn = (HttpsURLConnection) u.openConnection();
			HttpsURLConnection.setDefaultSSLSocketFactory(new SslSocketFactory().createSSLSocketFactory());
		} else {
			conn = (HttpURLConnection) u.openConnection();
		}
		conn.setRequestMethod("POST");
		conn.setConnectTimeout(10000);
		conn.setReadTimeout(10000);
		// headers
		if (headers != null) {
			for (String key : headers.keySet()) {
				conn.addRequestProperty(key, headers.get(key));
			}
		}
		// body
		if (body != null) {
			conn.setDoOutput(true);
			OutputStream os = conn.getOutputStream();
			os.write(body.getBytes());
			os.flush();
			os.close();
		}
		return conn.getInputStream();
	}
}
